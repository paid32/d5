import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt){
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }
   public static boolean haspath(ArrayList<Edge>graph[],int src, int dest,boolean visited[])
   {
       if(src == dest)
       {
           return true;
       }

       visited[src] = true;

       for(Edge edge : graph[src])
       {
            if(visited[edge.nbr]==false)
            {
                if(haspath(graph,edge.nbr,dest,visited))
                {
                    return true;
                }
            }
       }

       visited[src] = false;
       return false;

   }
   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for(int i = 0; i < vtces; i++){
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for(int i = 0; i < edges; i++){
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      int src = Integer.parseInt(br.readLine());
      int dest = Integer.parseInt(br.readLine());

      // write your code here
      System.out.println(haspath(graph, src, dest,new boolean[vtces]));
    }

}

/*
print all paths
import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }
   public static void allpaths(ArrayList<Edge>graph[],int src,int dest,boolean visited[],String path)
   {
        if(src == dest)
        {
            System.out.println(path+src);
            return;
        }

        visited[src] = true;
        path+=src;
        for(Edge edge : graph[src])
        {
            if(visited[edge.nbr]==false)
            {
                allpaths(graph, edge.nbr, dest, visited, path);
            }
        }

        visited[src] = false;
   }
   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      int src = Integer.parseInt(br.readLine());
      int dest = Integer.parseInt(br.readLine());

      // write all your codes here

      allpaths(graph, src, dest,new boolean[vtces],"");

   }


}
*/
/*
BFS
import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;

      Edge(int src, int nbr) {
         this.src = src;
         this.nbr = nbr;
      }
   }

   static class Pair{
       int node;
       String pathSofar;
       
       Pair(int node, String pathSofar){
           this.node = node;
           this.pathSofar = pathSofar;
       }
   }
   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         graph[v1].add(new Edge(v1, v2));
         graph[v2].add(new Edge(v2, v1));
      }
      
      int src = Integer.parseInt(br.readLine());
      // write your code here  
      
      Queue<Pair> q = new LinkedList<>();
      boolean[] vis = new boolean[vtces];
      
      q.add(new Pair(src, "" + src));
      
      while(q.size() > 0){
          // remove
          Pair curr = q.remove();
          
          if(vis[curr.node] == true) continue;
          
          // mark*
          vis[curr.node] = true;
          
          // work
          System.out.println(curr.node + "@" + curr.pathSofar);
          
          // add*
          for(Edge e: graph[curr.node]){
              if(vis[e.nbr] == false){
                  q.add(new Pair(e.nbr, curr.pathSofar + e.nbr));
              }
          }
      }
   }
}
*/

/*
DFS
import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }
    
   static class Pair implements Comparable<Pair>{
       int node;
       String pathSofar;
       int weightSofar;
       
       Pair(int node, String pathSofar, int weightSofar){
           this.node = node;
           this.pathSofar = pathSofar;
           this.weightSofar = weightSofar;
       }
       
       public int compareTo(Pair other){
           return this.weightSofar - other.weightSofar;
       }
   }    
   
   
   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      int src = Integer.parseInt(br.readLine());
      // write your code here
      
      PriorityQueue<Pair> q = new PriorityQueue<>();
      boolean[] vis = new boolean[vtces];
      
      q.add(new Pair(src, "" + src, 0));
      
      while(q.size() > 0){
          // remove
          Pair curr = q.remove();
          
          if(vis[curr.node] == true) continue;
          
          // mark*
          vis[curr.node] = true;
          
          // work
          System.out.println(curr.node + " via " + curr.pathSofar + " @ " + curr.weightSofar);
          
          // add*
          for(Edge e: graph[curr.node]){
              if(vis[e.nbr] == false){
                  q.add(new Pair(e.nbr, curr.pathSofar + e.nbr, curr.weightSofar + e.wt));
              }
          }
      }
      
   }
}
*/